<?php
/*                                                                        *
 * This script is part of the TYPO3 project - inspiring people to share!  *
 *                                                                        *
 * TYPO3 is free software; you can redistribute it and/or modify it under *
 * the terms of the GNU General Public License version 2 as published by  *
 * the Free Software Foundation.                                          *
 *                                                                        *
 * This script is distributed in the hope that it will be useful, but     *
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHAN-    *
 * TABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General      *
 * Public License for more details.                                       *
 *                                                                        */

/**
 * A pre processor validating an auth code generated by Finisher_GenerateAuthCode.
 *
 * @author	Reinhard Führicht <rf@typoheads.at>
 * @package	Tx_Formhandler
 * @subpackage	PreProcessor
 */
class Tx_FormhandlerSucription_PreProcessor_ValidateAuthCodeDB extends Tx_Formhandler_PreProcessor_ValidateAuthCode {

	/**
	 * @var Tx_FormhandlerSubscription_Utils_AuthCode
	 */
	protected $utils;

	/**
	 * Inits the finisher mapping settings values to internal attributes.
	 *
	 * @param array $gp
	 * @param array $settings
	 * @return void
	 */
	public function init($gp, $settings) {

		parent::init($gp, $settings);

		$this->utils = Tx_FormhandlerSubscription_Utils_AuthCode::getInstance();
	}

	/**
	 * The main method called by the controller
	 *
	 * @return array
	 */
	public function process() {

		try {

			$authCode = $this->utils->getAuthCode();

			if (empty($authCode)) {
				if (!intval($this->settings['authCodeIsOptional'])) {
					$this->utilityFuncs->throwException('validateauthcode_insufficient_params');
				} else {
					return $this->gp;
				}
			}

			$authCodeData = $this->utils->getAuthCodeDataFromDB($authCode);
			if (!isset($authCodeData)) {
				$this->utilityFuncs->throwException('validateauthcode_no_record_found');
			}

			$this->utils->checkAuthCodeAction($authCodeData['action']);

			switch ($authCodeData['action']) {

				case Tx_FormhandlerSubscription_Utils_AuthCode::ACTION_ENABLE_RECORD:
					$this->updateHiddenField($authCodeData);
					$this->invalidateAuthCode($authCodeData);
					break;

				case Tx_FormhandlerSubscription_Utils_AuthCode::ACTION_ACCESS_FORM:

						// Make the auth code available in the form so that it can be
						// submitted as a hidden field
					$this->gp['authCode'] = $authCode;

						// Make the auth code data and the auth code record data available
						// so that it can be displayed to the user
					$this->gp['authCodeData'] = $authCodeData;

					$authCodeRecordData = $this->utils->getAuthCodeRecordFromDB($authCodeData);
					$this->gp['authCodeRecord'] = $authCodeRecordData;

					if (intval($this->settings['mergeRecordDataToGP'])) {
						$currentGP = $this->gp;
						$this->gp = array_merge($this->gp, $authCodeRecordData);
					}

						// Store the authCode in the session so that the user can use it
						// on different pages without the need to append it as a get
						// parameter everytime
					$this->utils->storeAuthCodeInSession($authCode);
					break;
			}

			$redirectPage = $this->utilityFuncs->getSingle($this->settings, 'redirectPage');
			if ($redirectPage) {
				$this->utilityFuncs->doRedirect($redirectPage, $this->settings['correctRedirectUrl'], $this->settings['additionalParams.']);
			}
		} catch(Exception $e) {

				// make sure, invalid auth codes are deleted
			if (isset($authCodeData)) {
				$this->invalidateAuthCode($authCodeData, TRUE);
			}

			//$redirectPage = $this->utilityFuncs->getSingle($this->settings, 'errorRedirectPage');
			if ($redirectPage) {
				$this->utilityFuncs->doRedirect($redirectPage, $this->settings['correctRedirectUrl'], $this->settings['additionalParams.']);
			} else {
				throw new Exception($e->getMessage());
			}
		}

		return $this->gp;
	}

	protected function invalidateAuthCode($authCodeData, $forceClearing = FALSE) {

		if ((!intval($this->settings['doNotInvalidateAuthCode'])) || $forceClearing) {
			$this->utils->clearAuthCodeFromSession();
			$this->utils->clearAuthCodesByRowData($authCodeData);
			$this->gp = $this->utils->clearAuthCodeFromGP($this->gp);
		}
	}

	protected function updateHiddenField($authCodeData) {

		$updateTable = $authCodeData['reference_table'];
		$uidField = $authCodeData['reference_table_uid_field'];
		$uid = $authCodeData['reference_table_uid'];
		$hiddenField = $authCodeData['reference_table_hidden_field'];

		$res = $GLOBALS['TYPO3_DB']->exec_UPDATEquery($updateTable, $uidField . '=' . $uid, array($hiddenField => 0));
		if (!$res) {
			$this->utilityFuncs->throwException('validateauthcode_update_failed');
		}
		$GLOBALS['TYPO3_DB']->sql_free_result($res);
	}
}
?>